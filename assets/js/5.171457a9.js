(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{165:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"documentation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#documentation","aria-hidden":"true"}},[t._v("#")]),t._v(" Documentation")]),t._v(" "),s("h2",{attrs:{id:"form"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#form","aria-hidden":"true"}},[t._v("#")]),t._v(" Form")]),t._v(" "),s("p",[t._v("A "),s("code",[t._v("Form")]),t._v(" in Astro Forms maintains a collection of rows, responds to row changes, and validates rows.")]),t._v(" "),s("h3",{attrs:{id:"creating-a-form"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-form","aria-hidden":"true"}},[t._v("#")]),t._v(" Creating a Form")]),t._v(" "),s("p",[t._v("To create a form, simply subclass "),s("code",[t._v("Form")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("AstroForms")]),t._v("\n\n"),s("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("LoginForm")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("Form")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("As "),s("code",[t._v("Form")]),t._v(" is a subclass of "),s("code",[t._v("UIView")]),t._v(", just add the class in Interface Builder to add it to your "),s("code",[t._v("UIViewController")]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"adding-a-row"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#adding-a-row","aria-hidden":"true"}},[t._v("#")]),t._v(" Adding a Row")]),t._v(" "),s("p",[t._v("Forms have "),s("code",[t._v("add(_:)")]),t._v(" and "),s("code",[t._v("insert(_: at:)")]),t._v(" instance methods for adding rows to a form.")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("add")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("_")]),t._v(" row"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("AnyRow")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("insert")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("_")]),t._v(" row"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("AnyRow")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" at index"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("Int")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("To add a row, simply call the add/insert method at any point, for example:")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("AstroForms")]),t._v("\n\n"),s("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("LoginForm")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("Form")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\n\t"),s("span",{attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("LoginFormTag")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("RowTag")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("Equatable")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{attrs:{class:"token keyword"}},[t._v("case")]),t._v(" fullName\n\t"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t"),s("span",{attrs:{class:"token keyword"}},[t._v("override")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("awakeFromNib")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{attrs:{class:"token keyword"}},[t._v("super")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("awakeFromNib")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\t\t"),s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" fullNameRow "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("TextFieldRow")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("LoginFormTag")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fullName"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            $"),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("view"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("label"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"Full Name"')]),t._v("\n            $"),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("view"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("textField"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("placeholder "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"Enter your name..."')]),t._v("\n        "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),s("span",{attrs:{class:"token comment"}},[t._v("// Adding the row here")]),t._v("\n        "),s("span",{attrs:{class:"token function"}},[t._v("add")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fullNameRow"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\t"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Once added, these rows are available via the "),s("code",[t._v("rows")]),t._v(" property, an instance variable of type "),s("code",[t._v("[AnyRow]")]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"row-tags-in-forms"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#row-tags-in-forms","aria-hidden":"true"}},[t._v("#")]),t._v(" Row Tags in Forms")]),t._v(" "),s("p",[t._v("In the above example, you'll notice when creating "),s("code",[t._v("fullNameRow")]),t._v(" we used a "),s("code",[t._v("LoginFormTag")]),t._v(" enumerated type defined in "),s("code",[t._v("LoginForm")]),t._v(".")]),t._v(" "),s("p",[t._v("Tags are an important concept in Astro Forms:")]),t._v(" "),s("ul",[s("li",[t._v("Tags provide a unique ID for every "),s("code",[t._v("Row")])]),t._v(" "),s("li",[t._v("Tags can be dynamic using associated values")]),t._v(" "),s("li",[t._v("Every "),s("code",[t._v("Row")]),t._v(" must have a tag")]),t._v(" "),s("li",[t._v("Every "),s("code",[t._v("Form")]),t._v(" has an enum that declares it's set of row tags.")])]),t._v(" "),s("p",[t._v("Create tags by implementing "),s("code",[t._v("RowTag")]),t._v(" and "),s("code",[t._v("Equatable")]),t._v(". For example a set of tags might be:")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("LoginFormTag")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("RowTag")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("Equatable")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{attrs:{class:"token keyword"}},[t._v("case")]),t._v(" email"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" password"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" submit\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("A "),s("code",[t._v("Form")]),t._v("'s row tags type must implement "),s("code",[t._v("Equatable")]),t._v(" so they can be compared with each other.")]),t._v(" "),s("h3",{attrs:{id:"finding-a-row"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#finding-a-row","aria-hidden":"true"}},[t._v("#")]),t._v(" Finding a Row")]),t._v(" "),s("p",[t._v("Because every row has a tag you can access them later with the "),s("code",[t._v("findRow(tag:)")]),t._v(" instance method:")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" fullNameRow"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("TextFieldRow")]),s("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("self")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("findRow")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("LoginFormTag")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fullName"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("If rows are rendered dynamically, associated types provide a convenient way to declare tags for rows that may be generated base on conditions.")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("LoginFormTag")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("RowTag")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("Equatable")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("dynamicTag")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token builtin"}},[t._v("String")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("// Later, inside an instance method:")]),t._v("\n\n"),s("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token number"}},[t._v("4")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{attrs:{class:"token function"}},[t._v("add")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token function"}},[t._v("TextFieldRow")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("LoginFormTag")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("dynamicTag")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"address-line-'),s("span",{attrs:{class:"token interpolation"}},[s("span",{attrs:{class:"token delimiter variable"}},[t._v("\\(")]),t._v("i"),s("span",{attrs:{class:"token delimiter variable"}},[t._v(")")])]),t._v('"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" foundRow"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("TextFieldRow")]),s("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("self")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("findRow")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\ttag"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("LoginFormTag")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("dynamicTag")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v('"address-line-4"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("Only use dynamic row tags when absolutely required to avoid runtime errors from mistyped strings.")])]),t._v(" "),s("h3",{attrs:{id:"removing-a-row"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#removing-a-row","aria-hidden":"true"}},[t._v("#")]),t._v(" Removing a Row")]),t._v(" "),s("p",[t._v("A Form contains an remove function that will remove a row, and any associated views from the "),s("code",[t._v("Form")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("remove")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("at index"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("Int")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n")])])]),s("h3",{attrs:{id:"responding-to-row-changes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#responding-to-row-changes","aria-hidden":"true"}},[t._v("#")]),t._v(" Responding to Row Changes")]),t._v(" "),s("p",[t._v("A "),s("code",[t._v("Form")]),t._v(" receives all Row updates in a overrideable method:")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("rowUpdate")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("RowUpdate")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" row"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("AnyRow")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("There are several RowUpdate types, that map to common validation requirements, however can be used for any arbitrary form update (for example show/hide).")]),t._v(" "),s("p",[t._v("These are:")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("live")]),t._v(" "),s("code",[t._v("rowUpdate")]),t._v(" called every time the row is changed")]),t._v(" "),s("li",[s("strong",[t._v("onResignActive")]),t._v(" "),s("code",[t._v("rowUpdate")]),t._v(" called every time the row is blurred")]),t._v(" "),s("li",[s("strong",[t._v("onResignActiveAfterChange")]),t._v(" "),s("code",[t._v("rowUpdate")]),t._v(" called on blur after the row has changed at least once")]),t._v(" "),s("li",[s("strong",[t._v("regular")]),t._v(" "),s("code",[t._v("rowUpdate")]),t._v(" called every time the row is changed after the row has been blurred at least once, and every time it is blurred")])]),t._v(" "),s("p",[t._v("By example, to update the disabled state of a row that contains a button on every row change (ButtonRow):")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("override")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("rowUpdate")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("RowUpdate")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" row"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("AnyRow")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("guard")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" tag "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" row"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),s("span",{attrs:{class:"token keyword"}},[t._v("as")]),s("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("LoginFormTag")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),s("span",{attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" type "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("live"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            \n            "),s("span",{attrs:{class:"token comment"}},[t._v("// When any row is updated, update button row validity")]),t._v("\n            "),s("span",{attrs:{class:"token keyword"}},[t._v("guard")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" buttonRow"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("ButtonRow")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("findRow")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                tag"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("LoginFormTag")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("submit\n            "),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n            "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            \n            "),s("span",{attrs:{class:"token function"}},[t._v("updateButtonEnabledStateUI")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("row"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" buttonRow"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        \n        "),s("span",{attrs:{class:"token keyword"}},[t._v("default")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"row"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#row","aria-hidden":"true"}},[t._v("#")]),t._v(" Row")]),t._v(" "),s("p",[t._v("A Row in Astro Forms is a class that manages any "),s("code",[t._v("UIView")]),t._v(" that is inside a "),s("code",[t._v("Form")]),t._v(". This is commonly a view with an input like a "),s("code",[t._v("UITextField")]),t._v(", but it also might just be a view with your company logo, some images, a map - anything.")]),t._v(" "),s("h3",{attrs:{id:"creating-a-row"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-row","aria-hidden":"true"}},[t._v("#")]),t._v(" Creating a Row")]),t._v(" "),s("p",[t._v("To be added to a "),s("code",[t._v("Form")]),t._v(" a "),s("code",[t._v("Row")]),t._v(" only needs implement the "),s("code",[t._v("Row")]),t._v(" protocol. The requirements for this protocol are:")]),t._v(" "),s("ul",[s("li",[t._v("To define a "),s("code",[t._v("UIView")]),t._v(" type associated with the "),s("code",[t._v("Row")])]),t._v(" "),s("li",[t._v("Add an property to refer to the "),s("code",[t._v("UIView")]),t._v(" for this row")]),t._v(" "),s("li",[t._v("Add a "),s("code",[t._v("tag")]),t._v(" property to store this row's "),s("code",[t._v("RowTag")])])]),t._v(" "),s("p",[t._v("Here's an example for a row that shows a company logo:")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("CompanyLogoRow")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("Row")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\t"),s("span",{attrs:{class:"token comment"}},[t._v("// Define the view type")]),t._v("\n\tassociatedtype "),s("span",{attrs:{class:"token builtin"}},[t._v("View")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("CompanyLogoView")]),t._v("\n\n\t"),s("span",{attrs:{class:"token comment"}},[t._v("// The `UIView instance the user will see")]),t._v("\n\t"),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" view"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("View")]),t._v("\n\n\t"),s("span",{attrs:{class:"token comment"}},[t._v("// Every Row must have a RowTag")]),t._v("\n\t"),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" tag"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("RowTag")]),t._v("\n\n\t"),s("span",{attrs:{class:"token keyword"}},[t._v("init")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("RowTag")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" config"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token builtin"}},[t._v("CompanyLogoRow")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("Void")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token constant"}},[t._v("nil")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" view"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("View")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("View")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("fromXib")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),s("span",{attrs:{class:"token keyword"}},[t._v("self")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("view "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" view\n\t\t"),s("span",{attrs:{class:"token keyword"}},[t._v("self")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" tag\n\t\tconfig"),s("span",{attrs:{class:"token operator"}},[t._v("?")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token keyword"}},[t._v("self")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("In this example:")]),t._v(" "),s("ul",[s("li",[t._v("The "),s("code",[t._v("CompanyLogoRow")]),t._v(" includes a view, tag, and a basic initialization method")]),t._v(" "),s("li",[t._v("A "),s("code",[t._v("CompanyLogoView")]),t._v(" (defined somewhere else), is just a UIView")]),t._v(" "),s("li",[t._v("A Xib for the "),s("code",[t._v("CompanyLogoView")])])]),t._v(" "),s("p",[t._v("That's it, this row is ready to be added to a "),s("code",[t._v("Form")]),t._v(" with the "),s("code",[t._v("add(_:)")]),t._v(" instance method.")]),t._v(" "),s("h3",{attrs:{id:"value-rows"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#value-rows","aria-hidden":"true"}},[t._v("#")]),t._v(" Value Rows")]),t._v(" "),s("p",[t._v("A row can have a value of any type, simply by implementing the "),s("code",[t._v("ValueRow")]),t._v(" protocol. This protocol contains a "),s("code",[t._v("value")]),t._v(" instance property for getting and setting the value from the underlying "),s("code",[t._v("UIView")]),t._v(". In the below example this is a Boolean based on a "),s("code",[t._v("UISwitch")]),t._v(" state, for a "),s("code",[t._v("UITextField")]),t._v(" based row, it would get and set the String "),s("code",[t._v("text")]),t._v(" property on the field.")]),t._v(" "),s("p",[t._v("This protocol also contains some instance properties and methods (with default implementations) for delegating view updates to the "),s("code",[t._v("Form")]),t._v(".")]),t._v(" "),s("p",[t._v("By example, a SwitchRow (containing a "),s("code",[t._v("UISwitch")]),t._v(") with a value:")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("UIKit")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("AstroForms")]),t._v("\n\n"),s("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("SwitchRow")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("Row")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("ValueRow")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\t"),s("span",{attrs:{class:"token comment"}},[t._v("// ValueRow protocol requirements")]),t._v("\n\n\t"),s("span",{attrs:{class:"token keyword"}},[t._v("typealias")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("Value")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("Bool")]),t._v("\n    \n    "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" valueHasStartedEditing"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("Bool")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n    \n    "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" valueHasChanged"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("Bool")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n    \n    "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" valueHasEndedEditing"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("Bool")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n    \n    "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" value"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("Value")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        \n        "),s("span",{attrs:{class:"token keyword"}},[t._v("get")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" view"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token keyword"}},[t._v("switch")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isOn "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        \n        "),s("span",{attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" view"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token keyword"}},[t._v("switch")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("setOn")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newValue"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" animated"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token boolean"}},[t._v("false")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        \n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{attrs:{class:"token comment"}},[t._v("// Row protocol requirements")]),t._v("\n\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" tag"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("RowTag")]),t._v("\n\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" view"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("SwitchRowView")]),t._v("\n    \n    "),s("span",{attrs:{class:"token keyword"}},[t._v("init")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("RowTag")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" config"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token builtin"}},[t._v("SwitchRow")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("Void")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token constant"}},[t._v("nil")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \t"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("In implementing "),s("code",[t._v("ValueRow")]),t._v(" for this "),s("code",[t._v("SwitchRow")]),t._v(":")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("First, we set the Value typealias to a Bool (for when the switch is on or off)")])]),t._v(" "),s("li",[s("p",[t._v("Next, we create a virtual property that gets / sets the switch value, defined in the "),s("code",[t._v("SwitchRowView")])])]),t._v(" "),s("li",[s("p",[t._v("Finally, there are three variables "),s("code",[t._v("valueHasStartedEditing")]),t._v(", "),s("code",[t._v("valueHasChanged")]),t._v(", "),s("code",[t._v("valueHasEndedEditing")]),t._v(". These are to manage the validation state for this row. To satisfy the protocol, just assign these default values of "),s("code",[t._v("false")]),t._v(".")])])]),t._v(" "),s("p",[t._v("Now, in the "),s("code",[t._v("Form")]),t._v(", we have access to the row, with a Bool value:")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{attrs:{class:"token comment"}},[t._v("// Inside the Form subclass")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" row"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("SwitchRow")]),s("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("findRow")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("MyFormTag")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mySwitchRow"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" value"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("Bool")]),s("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" row"),s("span",{attrs:{class:"token operator"}},[t._v("?")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value\n")])])]),s("h3",{attrs:{id:"responding-to-view-changes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#responding-to-view-changes","aria-hidden":"true"}},[t._v("#")]),t._v(" Responding to View Changes")]),t._v(" "),s("p",[t._v("When the value of a "),s("code",[t._v("ValueRow")]),t._v(" changes, the "),s("code",[t._v("ValueRow")]),t._v(" automatically passes this change information up to a "),s("code",[t._v("Form")]),t._v(". This update is then available in the Form's "),s("code",[t._v("rowUpdate(type: RowUpdate, row: AnyRow)")]),t._v(".")]),t._v(" "),s("p",[t._v("However, given a Row's view can be any "),s("code",[t._v("UIView")]),t._v(" implementation, these changes could take many shapes. For example, a "),s("code",[t._v("UISwitch")]),t._v(" notifies a "),s("code",[t._v("UIView")]),t._v(" of updates using the target-action pattern for"),s("code",[t._v("UIControl.Event.valueChanged")]),t._v(", however a UITextField uses a combination of delegate methods and the target-action pattern for "),s("code",[t._v("UIControl.Event.editingChanged")]),t._v(".")]),t._v(" "),s("p",[t._v("For this reason, a "),s("code",[t._v("ValueRow")]),t._v(" normalizes all changes through several instance methods to call from your view.")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{attrs:{class:"token comment"}},[t._v("// The value of the view has changed")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("valueDidEdit")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("// The use has started editing the view, relevant for UITextField etc...")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("valueDidStartEditing")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("// The user is done editing. This is the correct method for views that have ")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v("// instantly changing values too - like a `UISwitch` or `UIButton`")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("valueDidEndEditing")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),s("p",[t._v("Call these on a row from the row's UIView implementation, for example:")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("SwitchRowView")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("UIView")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n    "),s("span",{attrs:{class:"token atrule"}},[t._v("@IBOutlet")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("weak")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" `"),s("span",{attrs:{class:"token keyword"}},[t._v("switch")]),t._v("`"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("UISwitch")]),s("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("\n    \n    "),s("span",{attrs:{class:"token atrule"}},[t._v("@IBOutlet")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("weak")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" label"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("UILabel")]),s("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("\n    \n    "),s("span",{attrs:{class:"token comment"}},[t._v("// Store a weak reference to a row so you can call methods on it. ")]),t._v("\n    "),s("span",{attrs:{class:"token comment"}},[t._v("// This can be assigned during Row initialization.")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("weak")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" row"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("SwitchRow")]),s("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("\n    \n    "),s("span",{attrs:{class:"token keyword"}},[t._v("override")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("awakeFromNib")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("super")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("awakeFromNib")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        \n        `"),s("span",{attrs:{class:"token keyword"}},[t._v("switch")]),t._v("`"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("addTarget")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n            "),s("span",{attrs:{class:"token keyword"}},[t._v("self")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            action"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" #"),s("span",{attrs:{class:"token function"}},[t._v("selector")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token function"}},[t._v("switchValueChanged")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("_")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),s("span",{attrs:{class:"token keyword"}},[t._v("for")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("valueChanged\n        "),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        \n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),s("span",{attrs:{class:"token atrule"}},[t._v("@objc")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("switchValueChanged")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("_")]),t._v(" sender"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("UISwitch")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \t"),s("span",{attrs:{class:"token comment"}},[t._v("// Call the row's valueDidEndEditing() method, ")]),t._v("\n    \t"),s("span",{attrs:{class:"token comment"}},[t._v("// so it can pass this event up for validation etc.")]),t._v("\n        row"),s("span",{attrs:{class:"token operator"}},[t._v("?")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("valueDidEndEditing")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"focusable-rows"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#focusable-rows","aria-hidden":"true"}},[t._v("#")]),t._v(" Focusable Rows")]),t._v(" "),s("p",[t._v("Astro Forms exposes a "),s("code",[t._v("FocusableRow")]),t._v(" protocol to:")]),t._v(" "),s("ul",[s("li",[t._v("Enable switching between focusable rows (like text inputs) with next/previous buttons")]),t._v(" "),s("li",[t._v("Allow rows to define custom a "),s("code",[t._v("focusRect")]),t._v(". A focusRect is the "),s("code",[t._v("CGRect")]),t._v(" that you want form's "),s("code",[t._v("UIScrollView")]),t._v(" to ensure is visible on screen when an input is focused. This is useful for ensuring for example, both email and password are visible above the keyboard when the email field is focused. No more hunting behind the keyboard for fields.")])]),t._v(" "),s("p",[t._v("To implement this protocol:")]),t._v(" "),s("ol",[s("li",[t._v("Use a block to return the "),s("code",[t._v("UIResponder")]),t._v(" that should be focused when a "),s("code",[t._v("Row")]),t._v(' is asked to take focus - for example when the "Next" button on the keyboard is tapped on the previous '),s("code",[t._v("Row")]),t._v(".")])]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("TextFieldRow")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("Row")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("ValueRow")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("FocusableRow")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n \t"),s("span",{attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" focusElement"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("UIResponder")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" view"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("textField "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("Provide a default implementation for focusRect to satisfy the protocol. If this is nil, the "),s("code",[t._v("Form")]),t._v(" will focus the "),s("code",[t._v("CGRect")]),t._v(" for the whole "),s("code",[t._v("Row")]),t._v(". It's almost always best to set this to nil, and provide custom focusRect's when adding rows (so you can reference other rows etc).")])]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" focusRect"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("CGRect")]),s("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{attrs:{class:"token constant"}},[t._v("nil")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Later when adding rows in your Form, override this block:")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[t._v("emailRow"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("focusRect "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token function"}},[t._v("CGRect")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        x"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" emailRow"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baseView"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("frame"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("origin"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        y"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" emailRow"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baseView"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("frame"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("origin"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("y"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        width"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" emailRow"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baseView"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("frame"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("width"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        height"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" emailRow"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baseView"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("frame"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("height "),s("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" passwordRow"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baseView"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("frame"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("height\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Now when the email row "),s("code",[t._v("UITextField")]),t._v(" is the "),s("code",[t._v("firstResponder")]),t._v(", both the emailRow and passwordRow will be visible above the keyboard.")]),t._v(" "),s("h3",{attrs:{id:"helpers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#helpers","aria-hidden":"true"}},[t._v("#")]),t._v(" Helpers")]),t._v(" "),s("p",[t._v("A Helper is a reusable "),s("code",[t._v("UIView")]),t._v(" that a Row manages that appears after the Row's "),s("code",[t._v("UIView")]),t._v(" in a "),s("code",[t._v("UIStackView")]),t._v(". A clear use case for a Helper is error message views that need to show and hide on validation errors. The interface between a "),s("code",[t._v("Row")]),t._v(" and a helper is the ability to show and hide the helper.")]),t._v(" "),s("p",[t._v("This is done through two methods:")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("func")]),t._v(" showHelper"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("UIView")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\tviewType"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" T"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token keyword"}},[t._v("Type")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n\tanimated"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("Bool")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n\tconfig"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("Void")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("hideHelper")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\tanimated"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("Bool")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token boolean"}},[t._v("false")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n\tcallback"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("Void")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token constant"}},[t._v("nil")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("By example, showing an error using the example helper "),s("code",[t._v("ErrorView")]),t._v(" is as simple as calling the show method, and configuring the view:")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("guard")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("validate")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("row"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" row"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("ValidationRule")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token keyword"}},[t._v("required")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    row"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("showHelper")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("viewType"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("ErrorView")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token keyword"}},[t._v("self")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" animated"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token boolean"}},[t._v("true")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" errorView "),s("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v("\n        errorView"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("label"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"This field is required"')]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("The only unusual thing here is the use of the class type instead of an existing instance as a parameter when showing a helper. This is to avoid the need to store instances of helper views - Astro Forms will manage replacing the view if necessary, or reusing the existing view if it is of the same type.")]),t._v(" "),s("h2",{attrs:{id:"validation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#validation","aria-hidden":"true"}},[t._v("#")]),t._v(" Validation")]),t._v(" "),s("p",[t._v("Validation is handled by several instance methods available on "),s("code",[t._v("Form")]),t._v(", and does not enforce any particular architecture.")]),t._v(" "),s("p",[t._v("However, as in the example project, the logical place is to handle validation in methods called from "),s("code",[t._v("func rowUpdate(type: RowUpdate, row: AnyRow)")]),t._v(" on the form.")]),t._v(" "),s("h3",{attrs:{id:"validation-methods"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#validation-methods","aria-hidden":"true"}},[t._v("#")]),t._v(" Validation Methods")]),t._v(" "),s("p",[t._v("There are several validation methods available on a form for validating input, with method signatures all beginning "),s("code",[t._v("validate")]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"basic-validation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#basic-validation","aria-hidden":"true"}},[t._v("#")]),t._v(" Basic Validation")]),t._v(" "),s("p",[t._v("The simplest kind of validation takes a variadic parameter of blocks that return boolean values. If all the blocks return true, then the result is true. Each block is passed the row value as it's parameter.")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[t._v("   "),s("span",{attrs:{class:"token keyword"}},[t._v("func")]),t._v(" validate"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("R"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("ValueRow")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        row"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" R"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{attrs:{class:"token number"}},[t._v("_")]),t._v(" rules"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("ValidationRuleBlock")]),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("R"),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("Bool")]),t._v("\n")])])]),s("p",[t._v("By example, consider a "),s("code",[t._v("StringRow")]),t._v(" with a value of string:")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" isValid"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("Bool")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" form"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("validate")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    row"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" stringRow"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" $"),s("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"astro"')]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token comment"}},[t._v("// $0 is the value of the stringRow")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" $"),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token builtin"}},[t._v("count")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  "),s("span",{attrs:{class:"token comment"}},[t._v("// typed to String based on the Row's Value associatedtype")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("Here, two blocks are passed in, one comparing the "),s("code",[t._v("StringRow")]),t._v(' value to "astro", and another counting the characters.')]),t._v(" "),s("h3",{attrs:{id:"validation-messages"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#validation-messages","aria-hidden":"true"}},[t._v("#")]),t._v(" Validation Messages")]),t._v(" "),s("p",[t._v("If there are multiple rules being used in a chain, it can be helpful to use a tuple with messages, so rather than just know the chain failed overall, you also have a message for the specific rule that failed.")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("func")]),t._v(" validate"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("R"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("ValueRow")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        row"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" R"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{attrs:{class:"token number"}},[t._v("_")]),t._v(" rules"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("ValidationRuleMsgBlock")]),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("R"),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token builtin"}},[t._v("Bool")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("String")]),s("span",{attrs:{class:"token operator"}},[t._v("?")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("By example, the following will return "),s("code",[t._v('(false, "The character count must be correct")')]),t._v(', for the input string "astro":')]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" isValid "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" form"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("validate")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    row"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" stringRow"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" $"),s("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"astro"')]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"The string should equal astro"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" $"),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token builtin"}},[t._v("count")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"The character count must be correct"')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"validation-list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#validation-list","aria-hidden":"true"}},[t._v("#")]),t._v(" Validation List")]),t._v(" "),s("p",[t._v("In some situations, you may want to return a full list of messages and true / false for those that pass or fail. A common use case for the structure is a password field with many rules, and you want to show the user which ones they have successfully filled, and those they have yet to pass.")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[t._v("    "),s("span",{attrs:{class:"token keyword"}},[t._v("func")]),t._v(" validateList"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("R"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("ValueRow")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        row"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" R"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{attrs:{class:"token number"}},[t._v("_")]),t._v(" rules"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("ValidationRuleMsgBlock")]),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("R"),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token builtin"}},[t._v("Bool")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("String")]),s("span",{attrs:{class:"token operator"}},[t._v("?")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("By example, with a password list:")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v('// Where stringRow.value == "astroforms"')]),t._v("\n\n"),s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" passwordValidityList "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" form"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("validateList")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    row"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" stringRow"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("$"),s("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"*"')]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"The password should contain a *."')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("$"),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token builtin"}},[t._v("count")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("6")]),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"The password should have more than 6 characters."')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("$"),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token builtin"}},[t._v("count")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("30")]),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"The password should have less than 30 characters."')]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("// Returns:")]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v('// [(false, "The password should contain a *."),')]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v('// (true, "The password should have more than 6 characters."),')]),t._v("\n"),s("span",{attrs:{class:"token comment"}},[t._v('// (true, "The password should have less than 30 characters.")]')]),t._v("\n\n")])])]),s("h3",{attrs:{id:"named-validation-rules"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#named-validation-rules","aria-hidden":"true"}},[t._v("#")]),t._v(" Named Validation Rules")]),t._v(" "),s("p",[t._v("Inline blocks are convenient however not very reusable. Astro Forms contains a factory of "),s("code",[t._v("ValidationRule")]),t._v(" methods, these can be mixed with inline blocks. This can be extended with your own methods via an extension.")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" isValid"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("Bool")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("validate")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\trow"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" stringRow"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" $"),s("span",{attrs:{class:"token number"}},[t._v("0")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token builtin"}},[t._v("count")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),s("span",{attrs:{class:"token builtin"}},[t._v("ValidationRule")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isEmail\n"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"theming"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#theming","aria-hidden":"true"}},[t._v("#")]),t._v(" Theming")]),t._v(" "),s("p",[t._v("You can create themes in a type safe way easily in Astro Forms for any kind of property. Themes are defined on a form and inherited by views automatically, although any given instance of a row can override the theme to allow multiple themes to be used in the same form.")]),t._v(" "),s("p",[t._v("Theming in Astro Forms can be used independently of forms too, you can apply the "),s("code",[t._v("Themeable")]),t._v(" protocol you create to any "),s("code",[t._v("UIView")]),t._v(", simply by implementing the "),s("code",[t._v("theme")]),t._v(" instance property and updating themes when you set it. If the given "),s("code",[t._v("UIView")]),t._v(" is in a subview of any "),s("code",[t._v("Form")]),t._v(", it won't inherit a theme automatically so you will need to define it on each "),s("code",[t._v("UIView")]),t._v(".")]),t._v(" "),s("p",[t._v("Here an example "),s("code",[t._v("UIImageView")]),t._v(" subclass that implements a different backgroundImage per theme in the Astro Forms example project:")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("ThemeableImageView")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("UIImageView")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("Themeable")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n    "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" theme"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("AstroTheme")]),s("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("didSet")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("updateTheme")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),s("span",{attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("updateTheme")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("self")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("image "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("image")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("formBackground"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"creating-a-theme"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-theme","aria-hidden":"true"}},[t._v("#")]),t._v(" Creating a Theme")]),t._v(" "),s("p",[t._v("To create a theme, you need to create your own "),s("code",[t._v("Themeable")]),t._v(" protocol, composed of various theming protocols that define themable behaviour (color, size) and also those that define how to apply the theme to your "),s("code",[t._v("UIView")]),t._v(" subclasses ("),s("code",[t._v("Form")]),t._v(" or "),s("code",[t._v("Row")]),t._v(" views). These are constrained to concrete enumerated types implementing:")]),t._v(" "),s("ul",[s("li",[t._v("The number and names of the different themes in your project (for example: light, dark etc.)")]),t._v(" "),s("li",[t._v("The properties that should be applied within the themes (primaryColor, smallMarginSize etc.)")])]),t._v(" "),s("p",[t._v("This then exposes easy to use methods with a convenience syntax in any UIView that inherits your new protocol.")]),t._v(" "),s("h4",{attrs:{id:"included-themable-protocols"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#included-themable-protocols","aria-hidden":"true"}},[t._v("#")]),t._v(" Included Themable Protocols")]),t._v(" "),s("p",[t._v("The color function is exposed by "),s("code",[t._v("ThemeableColorTraits")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("color")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("_")]),t._v(" requirement"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("ThemeColorType")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("UIColor")]),t._v("\n")])])]),s("p",[t._v("An example usage is: "),s("code",[t._v("textView.tintColor = color(.primaryTint)")]),t._v(",")]),t._v(" "),s("p",[t._v("The image function is exposed by "),s("code",[t._v("ThemeableImageTraits")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("image")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("_")]),t._v(" requirement"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("ThemeImageType")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("UIImage")]),t._v("\n")])])]),s("p",[t._v("An example usage is: "),s("code",[t._v("imageView.image = image(.formBackground)")]),t._v(".")]),t._v(" "),s("p",[t._v("In both these cases, a color and image will be returned for the currently active theme.")])])}],!1,null,null,null);e.options.__file="docs.md";a.default=e.exports}}]);